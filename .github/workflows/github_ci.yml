name: Elixir CI

on:
  push:
  pull_request:

env:
  MIX_ENV: test

jobs:
  test:
    name: Build and test
    runs-on: ubuntu-20.04
    services:
      db:
        image: postgres:12
        ports: ['5432:5432']
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      ImageOs: ubuntu18.04
    steps:
    - uses: actions/checkout@v3
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: '1.14'
        otp-version: '23.1.4'
    - name: Restore dependencies cache
      uses: actions/cache@v3
      with:
        path: |
          deps
          _build
          priv/plts
        key: ${{ runner.os }}-mix-${{ hashFiles('mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-
    - name: Install dependencies
      run: mix deps.get

    - name: Compile
      run: mix compile

    - name: Setup database
      run: |
        mix ecto.create
        mix ecto.migrate

    - name: Check formatter
      run: mix format --dry-run --check-formatted

    - name: Check migrations correctness
      run: mix excellent_migrations.check_safety

    - name: Run tests
      run: mix test

    - name: Check credo
      run: mix credo --strict

    - name: Create PLTs
      if: steps.plt_cache.outputs.cache-hit != 'true'
      run: mix dialyzer --plt

    - name: Save PLT cache
      id: plt_cache_save
      uses: actions/cache/save@v3
      if: steps.plt_cache.outputs.cache-hit != 'true'
      with:
        key: |
          plt-${{ runner.os }}-${{ steps.beam.outputs.otp-version }}-${{ steps.beam.outputs.elixir-version }}-${{ hashFiles('**/mix.lock') }}
        path: |
          priv/plts

    - name: Check dialyzer
      run: mix dialyzer --format github --no-check

  frontend-check:
    name: Prettier checks
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Setup front
        uses: actions/cache@v3
        with:
          path: assets/node_modules
          key: node-${{ runner.os }}-${{ hashFiles('assets/package-lock.json') }}

      - name: Install node modules
        working-directory: ./assets
        run: npm install --force

      - name: Run ESLint and Prettier Check
        working-directory: ./assets
        run: npm run check-formatting
